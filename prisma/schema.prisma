// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  password         String?            @db.Text
  accounts         Account[]
  sessions         Session[]
  assigned         AssigneesToTasks[]
  createdTasks     Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id               String             @id @default(cuid())
  status           Status             @relation(fields: [statusId], references: [id])
  statusId         String             @default("clf631pkj0006u6c85i86iuo2")
  title            String
  content          String
  creator          User               @relation(fields: [creatorId], references: [id])
  creatorId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  assignedTo       AssigneesToTasks[] 
}

model AssigneesToTasks {
  taskId  String
  userId  String
  task    Task     @relation(fields: [taskId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  @@id([taskId, userId])
}

model Status {
  id               String             @id @default(cuid())
  status           String
  tasks            Task[]
}
